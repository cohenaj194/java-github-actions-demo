# # Starter pipeline
# # Start with a minimal pipeline that you can customize to build and deploy your code.
# # Add steps that build, run tests, deploy, and more:
# # https://aka.ms/yaml

# trigger:
# - main

# pool:
#   vmImage: ubuntu-latest

# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'


trigger:
- main

variables:
  - name: NIGHTVISION_TARGET
    value: javaspringvulny-api-azure
  - name: NIGHTVISION_APP
    value: javaspringvulny-api-azure
  - name: NIGHTVISION_AUTH
    value: javaspringvulny-api-azure
  - name: NIGHTVISION_PROJECT
    value: testing
  - name: DOCKER_HOST
    value: tcp://docker:2375/
  - name: DOCKER_DRIVER
    value: overlay2
  - name: FF_NETWORK_PER_BUILD
    value: "true"

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Test
  jobs:
  - job: Build
    steps:
    - script: |
        echo "$NIGHTVISION_TARGET , $NIGHTVISION_APP , $NIGHTVISION_AUTH"
        apt-get update && apt-get install -y wget python3-venv python3-docker python3-pip python3 docker-compose curl gcc musl-dev libffi-dev
        python3 -m venv venv
        source venv/bin/activate
        pip3 install requests urllib3 semgrep
        wget -c https://downloads.nightvision.net/binaries/latest/nightvision_latest_linux_amd64.tar.gz -O - | tar -xz
        mv nightvision /usr/local/bin/
        nightvision swagger extract ./ --lang spring -t "$NIGHTVISION_TARGET -p $NIGHTVISION_PROJECT|| true
        if [ ! -e openapi-spec.yml ]; then cp backup-openapi-spec.yml openapi-spec.yml; fi
        docker-compose up -d
        sleep 60
        curl -k https://docker:9000
        nightvision scan -t "$NIGHTVISION_TARGET -a $NIGHTVISION_APP --auth $NIGHTVISION_AUTH -p $NIGHTVISION_PROJECT > scan-results.txt
        nightvision export sarif -s "$(head -n 1 scan-results.txt)" --swagger-file openapi-spec.yml
        for pod in $(docker ps | grep -v 'CONTAINER ID' | grep -v IMAGE | awk '{print $1}'); do docker logs $pod >> test.pod.logs 2>&1; done
      displayName: 'Run tests and export results'
      env:
        NIGHTVISION_TOKEN: $(NIGHTVISION_TOKEN)

    - publish: $(System.DefaultWorkingDirectory)/openapi-spec.yml
      artifact: openapi-spec
      displayName: 'Publish OpenAPI Spec'

    - publish: $(System.DefaultWorkingDirectory)/test.pod.logs
      artifact: test-pod-logs
      displayName: 'Publish Test Pod Logs'

    - publish: $(System.DefaultWorkingDirectory)/results.sarif
      artifact: results-sarif
      displayName: 'Publish SARIF Results'
