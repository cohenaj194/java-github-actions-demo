# # Starter pipeline
# # Start with a minimal pipeline that you can customize to build and deploy your code.
# # Add steps that build, run tests, deploy, and more:
# # https://aka.ms/yaml

# trigger:
# - main

# pool:
#   vmImage: ubuntu-latest

# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'


trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  NIGHTVISION_TOKEN: $(NIGHTVISION_TOKEN)
  NIGHTVISION_TARGET: javaspringvulny-api-azure2
  NIGHTVISION_APP: javaspringvulny-api-azure2
  NIGHTVISION_AUTH: javaspringvulny-api-azure2
  NIGHTVISION_PROJECT:  testing

stages:
- stage: Test
  jobs:
  - job: BuildAndTest
    steps:
    - checkout: self
      displayName: 'Clone Code'

    - script: |
        wget -c https://downloads.nightvision.net/binaries/latest/nightvision_latest_linux_amd64.tar.gz -O - | tar -xz
        sudo mv nightvision /usr/local/bin/
        python -m pip install semgrep --user
      displayName: 'Install NightVision'

    - script: |
        nightvision swagger extract ./ -t $NIGHTVISION_TARGET --lang spring || true
        if [ ! -e openapi-spec.yml ]; then
            cp backup-openapi-spec.yml openapi-spec.yml
        fi
      displayName: 'Extract API Documentation from Code'

    - script: |
        docker-compose up -d
        sleep 60
      displayName: 'Start the App'

    - script: |
        nightvision scan -t $NIGHTVISION_TARGET -a $NIGHTVISION_APP --auth $NIGHTVISION_AUTH > scan-results.txt
        nightvision export sarif -s "$(head -n 1 scan-results.txt)" --swagger-file openapi-spec.yml
      displayName: 'Scan the API'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'results.sarif'
        artifact: 'SARIF_File'
      displayName: 'Upload SARIF File'

